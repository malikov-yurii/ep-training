Выражение n -> n + 1, это просто аналог выражения Integer func(Integer n) { return n+1;},
 а выражение () -> «a1» аналог выражения String func() { return «a1»;} обернутых в анонимный класс.



Общее правило: у stream'a может быть сколько угодно вызовов конвейерных вызовов и в конце один терминальный,
при этом все конвейерные методы выполняются лениво и пока не будет вызван терминальный метод никаких действий
на самом деле не происходит, так же как создать объект Thread или Runnable, но не вызвать у него start.

В целом, этот механизм похож на конструирования SQL запросов, может быть сколько угодно вложенных Select'ов
и только один результат в итоге. Например, в выражении
collection.stream().filter((s) -> s.contains(«1»)).skip(2).findFirst(),
filter и skip — конвейерные,
а findFirst — терминальный, он возвращает объект Optional и это заканчивает работу со stream'ом.

Неинтерферирующуя функция не изменяет основной источник данных потока. Например, в приведенном выше примере лямбда выражение не изменяет mList путем добавления или удаления элементов из коллекции.

Лишенная состояния функция — выполнение операции является детерминированным, например, в приведенном выше примере лямбда-выражение не зависит от какой-либо изменяемой переменной или состояния из внешней среды, которая могла бы измениться во время выполнения.

Примитивные потоки используют специализированные лямбда-выражения, например IntFunction Function или IntPredicate вместо Predicate .
И примитивные потоки поддерживают дополнительные терминальные операции sum() и average():